                        When to use the Strategy Pattern

When you want to define a class that will have one behavior that is similar to other
behaviors in a list


I want the class object to able to choose from

    Not Flying

    Fly with Wings

    Fly Super Fast


When you need to use one of several behaviors dynamically


Often reduces long lists of conditionals

Avoid duplicate code

Keeps class changes from forcing other class changes

Can hide complicated / secret code from the user

Negative: Increased Number of Objects / Classes